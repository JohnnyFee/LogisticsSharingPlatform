// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lsp.web;

import com.lsp.model.transportation.Vehicle;
import com.lsp.model.transportation.VehicleStatus;
import com.lsp.model.transportation.VehicleType;
import com.lsp.service.VehicleService;
import com.lsp.web.VehicleController;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect VehicleController_Roo_Controller {
    
    @Autowired
    VehicleService VehicleController.vehicleService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String VehicleController.create(@Valid Vehicle vehicle, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, vehicle);
            return "vehicles/create";
        }
        uiModel.asMap().clear();
        vehicleService.saveVehicle(vehicle);
        return "redirect:/vehicles/" + encodeUrlPathSegment(vehicle.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String VehicleController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Vehicle());
        return "vehicles/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String VehicleController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("vehicle", vehicleService.findVehicle(id));
        uiModel.addAttribute("itemId", id);
        return "vehicles/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String VehicleController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("vehicles", vehicleService.findVehicleEntries(firstResult, sizeNo));
            float nrOfPages = (float) vehicleService.countAllVehicles() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("vehicles", vehicleService.findAllVehicles());
        }
        return "vehicles/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String VehicleController.update(@Valid Vehicle vehicle, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, vehicle);
            return "vehicles/update";
        }
        uiModel.asMap().clear();
        vehicleService.updateVehicle(vehicle);
        return "redirect:/vehicles/" + encodeUrlPathSegment(vehicle.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String VehicleController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, vehicleService.findVehicle(id));
        return "vehicles/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String VehicleController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Vehicle vehicle = vehicleService.findVehicle(id);
        vehicleService.deleteVehicle(vehicle);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/vehicles";
    }
    
    void VehicleController.populateEditForm(Model uiModel, Vehicle vehicle) {
        uiModel.addAttribute("vehicle", vehicle);
        uiModel.addAttribute("vehiclestatuses", Arrays.asList(VehicleStatus.values()));
        uiModel.addAttribute("vehicletypes", Arrays.asList(VehicleType.values()));
    }
    
    String VehicleController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
